import java.text.SimpleDateFormat

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jan' at '27.06.16 20:45' with Gradle 2.9
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Add the bintray plugin for deployment
plugins {
    id "com.jfrog.bintray" version "1.7"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven' //needed for dependency snipped on bintray

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

version = ''

def getTagDescGit = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getTagGit = { ->
    def tagDesc = getTagDescGit()
    if(tagDesc.split('-').length > 1) {
        return ''
    }
    return tagDesc
}

def getCommitGit = { ->
    def tagDesc = getTagDescGit()
    if(tagDesc.split('-').length > 1) {
        return tagDesc.split('-g')[1]
    }
    return ''
}

def getBranchGit = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getTagCommentGit = { tagName ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '-l', '-n9', tagName
        standardOutput = stdout
    }
    return stdout.toString().trim().replace(versionName, '')
}

def getCommitCommentGit = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--pretty=%B' // pretty to hide email
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

bintray{
    def gitUrl = 'https://github.com/'+repoSlug

    def date = new SimpleDateFormat("yyyy-MM-dd").format(new Date())

    def branch = ''
    def commit = ''
    def tag = ''
    def bintrayUser = ''
    def bintrayApiKey = ''

    //disabled by default
    bintrayUpload.enabled = false
    if(System.getenv().containsKey("TRAVIS_EVENT_TYPE")) {
        //build runs on travis and not manually by the user

        if(System.getenv().get("TRAVIS_PULL_REQUEST") == 'false') {
            //we are not interested in building after pull requests

            //we are lazy and use the information given by travis

            //the current branch if triggered after commit or the tag
            //if triggered after tagging
            branch = System.getenv().get("TRAVIS_BRANCH")
            commit = System.getenv().get("TRAVIS_COMMIT")
            tag = System.getenv().get("TRAVIS_TAG")
            //you have to set this on the travis website
            bintrayUser = System.getenv('BINTRAY_USER')
            bintrayApiKey = System.getenv('BINTRAY_API_KEY')

            if(tag != '' || deployDevVersion) {
                bintrayUpload.enabled = true
            }
            if(tag != ''){
                //if triggered after tagging there is no new commit
                commit = ''
                //if the tag isn't created at the original repository
                //we won't deploy that version to the master repository
                if(repoSlug != System.getenv().get("TRAVIS_REPO_SLUG")){
                    bintrayUpload.enabled = false
                }else{
                    //we deploy tag releases only from the master branch
                    branch = 'master'
                }
            }

            //TODO:
            //add deploy to repo-nightly if TRAVIS_EVENT_TYPE equals cron
            //and deploy NightlyVersion is enabled
            //use only the date as description
        }
    }else{
        //build is manually triggered by the user
        //maybe some local properties exists
        Properties properties = new Properties()
        if(project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        }
        //the bintray credentials have to either exist in local.properties or as environment variable
        bintrayUser = properties.getProperty('bintrayUser', System.getenv('BINTRAY_USER'))
        bintrayApiKey = properties.getProperty('bintrayApiKey', System.getenv('BINTRAY_API_KEY'))

        //read configuration from git
        branch = getBranchGit()
        commit = getCommitGit()
        tag = getTagGit()

        //always deploy if manually triggered
        bintrayUpload.enabled = true
    }

    //disable upload to branches which are not defined
    def branchList = deployBranches.replaceAll("\\s","").replace('[',',').replace(']',',')
    if(!branchList.contains(','+branch+',')){
        bintrayUpload.enabled = false
        println "This branch \"$branch\" isn't accepted for deployment!"
    }

    //shorten commit hash to default length
    if(commit.length() > 6) {
        commit = commit.substring(0, 6)
    }

    //Use branch name as addition to the project name to
    //enable build of different branches. The master branch
    //does not change the name.
    //If it is a tag release it will be deployed to the
    //default repository. If it is a commit deploy it will
    //be deployed to the dev version.
    //TODO: Add cron deploy to nightly version
    def bintrayProjectName = project.name+(branch == 'master' ? '' : '-'+branch)+(tag == '' ? '-dev' : '')
    def bintrayCommitName = (tag == '' ? commit : tag)
    def bintrayVersionDesc = (tag == '' ? getCommitCommentGit() : getTagCommentGit(tag))
    def bintrayVersionName = (tag == '' ? date + '#' : '') + bintrayCommitName
    version = bintrayVersionName.replaceAll("#","_")

    user = bintrayUser
    key = bintrayApiKey
    configurations = ['archives']
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    pkg {
        repo = 'maven'
        name = bintrayProjectName
        userOrg = user
        licenses = [license]
        vcsUrl = gitUrl
        version {
            name = bintrayVersionName
            desc = bintrayVersionDesc
            released = new Date()
            licenses = [license]
            vcsTag = bintrayCommitName
            attributes = ['Github URL': "$gitUrl/tree/$bintrayCommitName"]
        }
    }

    if(bintrayUpload.enabled){
        println ''
        println "Deploying to bintray..."
        println "Project: $bintrayProjectName"
        println "Version: $bintrayVersionName"
        println "Commit: $bintrayCommitName"
        println "Website: https://bintray.com/$bintrayUser/maven/$bintrayProjectName/$bintrayVersionName/view".replaceAll("#", "%23")
        def bintrayGroup = group.replace(".",'/')
        println "Repository: https://dl.bintray.com/$bintrayUser/maven/$bintrayGroup/$project.name/$version/"
        println "Github: $gitUrl/tree/$bintrayCommitName"
        println ''
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}