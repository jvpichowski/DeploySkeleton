/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jan' at '27.06.16 20:45' with Gradle 2.9
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Add the bintray plugin for deployment
plugins {
    id "com.jfrog.bintray" version "1.7"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

group = 'com.example'

def versionType = ''
def versionName
def gitUrl = 'https://github.com/jvpichowski/DeploySkeleton'
//Those will be filled on deployNightly or deployRelease



/**
 * Returns the last tag name
 */
def getTagName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

/**
 * Returns the last commit hash
 */
def getHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}


task deployRelease {
    doLast {
        println "dr"
        versionType = 'release'
        versionName = getTagName()


    }
}
deployRelease.finalizedBy bintrayUpload

task deployNightly {
    doLast {
        println "dn"
        versionType = 'nigthly'
        versionName = getHash()
        project.rootProject.bintray{
            user = 'me'
        }
    }
}
//deployNightly.finalizedBy bintrayUpload

bintrayUpload.doFirst{
    println project.rootProject.bintray.user
    project.rootProject.bintray{
        user = ''
    }
}
bintrayUpload.doLast{
    println project.rootProject.bintray.user
}

bintray {git describe --exact-match HEAD

    Properties properties = new Properties()
    if(project.rootProject.file('local.properties').exists()) {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    }
    user = properties.getProperty('bintrayUser', System.getenv('BINTRAY_USER'))
    key = properties.getProperty('bintrayApiKey', System.getenv('BINTRAY_API_KEY'))
    configurations = ['archives']
//    licenses = ['BSD 3-Clause']
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = user
        licenses = ['BSD 3-Clause']
        vcsUrl = gitUrl
        version {
            name = versionType
            desc = 'some description'
            released  = new Date()
            licenses = ['BSD 3-Clause']
            vcsTag = version
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}