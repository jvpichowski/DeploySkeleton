/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jan' at '27.06.16 20:45' with Gradle 2.9
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Add the bintray plugin for deployment
plugins {
    id "com.jfrog.bintray" version "1.7"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven' //needed for dependency snipped on bintray

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

version = ''

bintray {

    def env = System.getenv()
    env.each{
        println it
    }

    def isTag = false;
    def versionType
    def versionName
    def description = ''

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    def tagDesc = stdout.toString().trim()
    if (tagDesc.split('-').length > 1) {
        if (deployDevVersion == 'false') {
            bintrayUpload.enabled = false
        }
        versionType = '-dev'
        versionName = tagDesc.split('-g')[1]
        version = versionName
        stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'log', '-1', '--pretty=%B' // pretty to hide email
            standardOutput = stdout
        }
        description = stdout.toString().trim()
        isTag = false
    } else {
        versionType = ''
        versionName = tagDesc
        version = versionName
        stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'tag', '-l', '-n9', versionName
            standardOutput = stdout
        }
        description = stdout.toString().trim().replaceAll(versionName, '')
        isTag = true
    }
    stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    def branch = stdout.toString().trim()
    if (!this.hasProperty("branch_$branch")) {
        bintrayUpload.enabled = false
    }else{
        if(this."branch_$branch" == "no"){
            bintrayUpload.enabled = false
        }
        if(this."branch_$branch" == "tag" && isTag){
            bintrayUpload.enabled = true
        }
        if(this."branch_$branch" == "always"){
            bintrayUpload.enabled = true
        }
    }

    Properties properties = new Properties()
    if(project.rootProject.file('local.properties').exists()) {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    }
    user = properties.getProperty('bintrayUser', System.getenv('BINTRAY_USER'))
    key = properties.getProperty('bintrayApiKey', System.getenv('BINTRAY_API_KEY'))
    configurations = ['archives']
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    pkg {
        repo = 'maven'
        name = project.name+versionType
        userOrg = user
        licenses = [license]
        vcsUrl = gitUrl
        version {
            name = versionName
            desc = description
            released  = new Date()
            licenses = [license]
            vcsTag = versionName
        }
    }

    bintrayUpload.enabled = false
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}